{"version":3,"sources":["theory/test-theory.js"],"names":["array","inBetween","a","b","el","inArray","arr","includes","users","name","age","surname","byField","fieldName","questions","id","category","createCategoryArr","categories","forEach","question","hasOwnProperty","push","createMurkup","container","document","createElement","categoryHeader","textContent","append","map","div","h3","wraper","arrEntries","getElementById","Object","entries","appendCategory"],"mappings":";AACA,MAAMA,EAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE1C,SAASC,EAAUC,EAAGC,GACb,OAAA,SAAUC,GACRA,OAAAA,GAAMF,GAAKE,GAAMD,GAK5B,SAASE,EAAQC,GACR,OAAA,SAAUF,GACRE,OAAAA,EAAIC,SAASH,IAMxB,IAAII,EAAQ,CACV,CAAEC,KAAM,OAAQC,IAAK,GAAIC,QAAS,UAClC,CAAEF,KAAM,QAASC,IAAK,GAAIC,QAAS,UACnC,CAAEF,KAAM,MAAOC,IAAK,GAAIC,QAAS,YAGnC,SAASC,EAAQC,GACR,MAAA,CAACX,EAAGC,IAAOD,EAAEW,GAAaV,EAAEU,GAAa,GAAK,EAgCvD,MAAMC,EAAY,CAChB,CAAEC,GAAI,IAAKN,KAAM,YAAaO,SAAU,QACxC,CAAED,GAAI,IAAKN,KAAM,WAAYO,SAAU,QACvC,CAAED,GAAI,IAAKN,KAAM,YAAaO,SAAU,QACxC,CAAED,GAAI,IAAKN,KAAM,UAAWO,SAAU,OACtC,CAAED,GAAI,IAAKN,KAAM,UAAWO,SAAU,OACtC,CAAED,GAAI,IAAKN,KAAM,YAAaO,SAAU,QACxC,CAAED,GAAI,IAAKN,KAAM,YAAaO,SAAU,QACxC,CAAED,GAAI,IAAKN,KAAM,WAAYO,SAAU,QAGzC,SAASC,EAAkBH,GACnBI,MAAAA,EAAa,GAQZA,OAPPJ,EAAUK,QAAQC,IACZF,EAAWG,eAAeD,EAASJ,UACrCE,EAAWE,EAASJ,UAAUM,KAAKF,GAEnCF,EAAWE,EAASJ,UAAY,CAACI,KAG9BF,EAGT,SAASK,EAAaP,EAAUE,GACxBM,MAAAA,EAAYC,SAASC,cAAc,OACnCC,EAAiBF,SAASC,cAAc,MAC9CC,EAAeC,YAAcZ,EAC7BQ,EAAUK,OAAOF,GACXrB,MAAAA,EAAMY,EAAWY,IAAId,IACnBe,MAAAA,EAAMN,SAASC,cAAc,OAC7BM,EAAKP,SAASC,cAAc,MAI3BK,OAHPC,EAAGJ,YAAcZ,EAASP,KAC1BsB,EAAIF,OAAOG,GAEJD,IAGFP,OADPA,EAAUK,UAAUvB,GACbkB,EAGT,SAASS,IACDC,MAAAA,EAAajB,EAAkBH,GAC/BmB,EAASR,SAASU,eAAe,UAClC,IAAA,MAAOnB,EAAUE,KAAekB,OAAOC,QAAQH,GAAa,CACzDI,MAAAA,EAAiBf,EAAaP,EAAUE,GAC9Ce,EAAOJ,OAAOS","file":"test-theory.d74a8865.js","sourceRoot":"../src","sourcesContent":["// Method filter:\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n\nfunction inBetween(a, b) {\n  return function (el) {\n    return el >= a && el <= b;\n  };\n}\n// console.log(array.filter(inBetween(5, 7)));\n\nfunction inArray(arr) {\n  return function (el) {\n    return arr.includes(el);\n  };\n}\n// console.log(array.filter(inArray([1,3,7])));\n\n// Method sort:\nlet users = [\n  { name: 'Іван', age: 20, surname: 'Іванов' },\n  { name: 'Петро', age: 18, surname: 'Петров' },\n  { name: 'Енн', age: 19, surname: 'Гетевей' },\n];\n\nfunction byField(fieldName) {\n  return (a, b) => (a[fieldName] > b[fieldName] ? 1 : -1);\n}\n\n//За ім’ям (Енн, Іван, Петро)\n// console.log(users.sort(byField('name')));\n// За віком (Петро, Енн, Іван)\n// console.log(users.sort(byField('age')));\n\n//<<<<<<<<<<  Task >>>>>>>>>>>>>>\n//Your task is to write a function which returns the sum of following series upto nth term(parameter).\n// Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +...\n\n// function SeriesSum(n) {\n//     let sum = 0;\n//     for (let i = 0; i < n; i += 1){\n//         sum += 1/(1+i*3)\n//     }\n//     return sum.toFixed(2);\n// }\n\n// function SeriesSum(n) {\n//     let sum = 0;\n//     for (let i = 1; i < n * 3; i += 3){\n//         sum += 1/i\n//     }\n//     return sum.toFixed(2);\n// }\n\n// console.log(SeriesSum(5));\n\n/* Create MurkUp with array of Objects!!! */\n\nconst questions = [\n  { id: '1', name: 'html=file', category: 'HTML' },\n  { id: '1', name: 'html=css', category: 'HTML' },\n  { id: '1', name: 'html=gggg', category: 'HTML' },\n  { id: '1', name: 'css=css', category: 'CSS' },\n  { id: '1', name: 'css=dfg', category: 'CSS' },\n  { id: '1', name: 'java=file', category: 'JAVA' },\n  { id: '1', name: 'JAVA=file', category: 'JAVA' },\n  { id: '1', name: 'CSS=file', category: 'CSS' },\n];\n\nfunction createCategoryArr(questions) {\n  const categories = {};\n  questions.forEach(question => {\n    if (categories.hasOwnProperty(question.category)) {\n      categories[question.category].push(question);\n    } else {\n      categories[question.category] = [question];\n    }\n  });\n  return categories;\n}\n\nfunction createMurkup(category, categories) {\n  const container = document.createElement('div');\n  const categoryHeader = document.createElement('h2');\n  categoryHeader.textContent = category;\n  container.append(categoryHeader);\n  const arr = categories.map(category => {\n    const div = document.createElement('div');\n    const h3 = document.createElement('h3');\n    h3.textContent = category.name;\n    div.append(h3);\n\n    return div;\n  });\n  container.append(...arr);\n  return container;\n}\n\nfunction wraper() {\n  const arrEntries = createCategoryArr(questions);\n  const wraper = document.getElementById('wraper');\n  for (const [category, categories] of Object.entries(arrEntries)) {\n    const appendCategory = createMurkup(category, categories);\n    wraper.append(appendCategory);\n  }\n}\n\n// wraper();\n"]}