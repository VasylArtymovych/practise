{"version":3,"sources":["Filmoteka/genres.json","Filmoteka/index.js"],"names":["module","exports","id","name","console","log","genres","api_key","img_url","BASE_URL","trending","discover","SEARCH_URL","card_list","document","querySelector","btn_container","FetchData","constructor","page","moviesFetch","response","fetch","URLSearchParams","json","setpage","newPage","increasePage","decreasePage","getData","fetchAndRenderCards","innerHTML","then","results","total_pages","markup","createCard","join","insertAdjacentHTML","createPagination","totalPage","beforTwoPage","beforePage","afterPage","afterTwoPage","addEventListener","onBtnClick","event","target","nodeName","textContent","data","map","backdrop_path","poster_path","genre_ids","release_date","title","genre","slice"],"mappings":"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","file":"Filmoteka.6fb82fbe.js","sourceRoot":"../src","sourcesContent":["module.exports=[{id:28,name:\"Action\"},{id:12,name:\"Adventure\"},{id:16,name:\"Animation\"},{id:35,name:\"Comedy\"},{id:80,name:\"Crime\"},{id:99,name:\"Documentary\"},{id:18,name:\"Drama\"},{id:10751,name:\"Family\"},{id:14,name:\"Fantasy\"},{id:36,name:\"History\"},{id:27,name:\"Horror\"},{id:10402,name:\"Music\"},{id:9648,name:\"Mystery\"},{id:10749,name:\"Romance\"},{id:878,name:\"Science Fiction\"},{id:10770,name:\"TV Movie\"},{id:53,name:\"Thriller\"},{id:10752,name:\"War\"},{id:37,name:\"Western\"}];","import * as genres from './genres.json';\nconsole.log(genres);\n\nconst api_key = \"9c009c00402fb866baf05bd346a2d01d\";\nconst img_url = 'https://image.tmdb.org/t/p/w500';\nconst BASE_URL = \"https://api.themoviedb.org/3/\";\nconst trending = \"https://api.themoviedb.org/3/trending/movie/week?\";\nconst discover = `https://api.themoviedb.org/3/discover/movie`;\nconst SEARCH_URL = `https://api.themoviedb.org/3/search/movie?api_key=${api_key}`;\n\nconst card_list = document.querySelector('.card_list');\nconst btn_container = document.querySelector('.btn_container');\n\nclass FetchData {\n    constructor(){\n        this.page = 1;\n    }\n\n    async moviesFetch(){\n        const response = await fetch(trending + new URLSearchParams({\n            api_key: api_key,\n            page: this.page,\n        }))\n        return response.json();\n    }\n    setpage(newPage){\n        this.page = newPage;\n    }\n    increasePage(){\n        this.page += 1;\n    }\n    decreasePage(){\n        this.page -= 1;\n    }\n};\n\nconst getData = new FetchData();\n\nfunction fetchAndRenderCards(page=1){\n    card_list.innerHTML = '';\n\n    getData.moviesFetch().then(({results, page, total_pages}) => {\n\n        const markup = createCard(results).join('');\n        card_list.insertAdjacentHTML('beforeend', markup);\n\n        createPagination(page, total_pages);\n    })\n\n};\nfetchAndRenderCards();\n\nfunction createPagination(page, totalPage){\n    const beforTwoPage = page - 2;\n    const beforePage = page -1;\n    const afterPage = page + 1; \n    const afterTwoPage = page + 2;\n    getData.setpage(page)\n    let markup = '';\n    \n    if (page > 1){\n        markup += '<li>&laquo;</li>';\n    }\n    if(page > 1){\n        markup += '<li>1</li>';\n        if(page > 4){\n            markup += '...';\n        }\n    }\n    if(page > 3){\n        markup += `<li>${beforTwoPage}</li>`\n    }\n    if(page > 2){\n        markup += `<li>${beforePage}</li>`\n    }\n    markup += `<li class='active'>${page}</li>`\n\n    if(page < totalPage - 1){\n        markup += `<li>${afterPage}</li>`\n    }\n    if(page < totalPage - 2){\n        markup += `<li>${afterTwoPage}</li>`\n    }\n    if(page < totalPage - 3){\n        markup += `<li>...</li>`\n    }\n    if(page < totalPage){\n        markup += `<li>${totalPage}</li>`\n        markup += '<li>&raquo;</li>'\n    }\n\n    btn_container.innerHTML = markup;\n    btn_container.addEventListener('click', onBtnClick);\n}\n\nfunction onBtnClick(event){\n    if(event.target.nodeName !== \"LI\"){\n        return;\n    \n    }\n    const target = event.target.textContent;\n    console.log(target);\n\n    switch (target){\n        case '«': \n            getData.decreasePage()\n            fetchAndRenderCards()\n        break;\n        case '...': \n        break;\n        case '»':\n            getData.increasePage()\n            fetchAndRenderCards()\n        break;\n        default:\n            getData.setpage(target)\n            fetchAndRenderCards()\n    }\n};\n\n\nfunction createCard(data) {\n    return data.map(({backdrop_path, poster_path, genre_ids, release_date, title, id}) => {\n        if (backdrop_path === null){\n                backdrop_path = poster_path;\n                if(poster_path === null) return;\n        }\n\n        return `\n            <li class=\"card_item\" id=\"${id}>\n                <div class=\"img-thumb\"></div>\n                <div class=\"wraper\">\n                    <img src=\"${img_url}${poster_path}\" alt=\"${title}\"/>\n                </div>\n                \n                <p class=\"title\">${title}</p>\n                <p class=\"genre\">${genre_ids.map(genre => {\n                    return `<span>${genre}</span>`;\n                })}</p>\n                <p class=\"year\">${release_date.slice(0, 4)}</p>\n            </li>\n        `;\n    });\n};\n\n\n"]}